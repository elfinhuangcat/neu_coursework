package main;
/**************************************************
 * Usage: 
 * hadoop jar <name-of-jar.jar> MedianOfPurchases 
 * <path-to-input> <path-to-output>  
 * <bin-size> <sample-rate>
 * 
 * This program is designed to run in Linux system.
 * 
 * Date created: Feb 10, 2015
 * @author Yaxin Huang, Revon Matthews
 **************************************************/

import java.io.File;
import java.io.FileWriter;
import java.util.Scanner;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class MedianOfPurchases extends Configured implements Tool {
    
    public static int sampleRate = 1;
    public static int binSize = 5;
    private static String inputPath = null; //In case the sample file is used.
    private static long samplingTime = 0;
    private static long jobRunningTime = 0;
    
    public static void main(String[] args) throws Exception {
        /*****************************************************************
         * When the jar is run, the user should include these arguments:
         * args[0]: path to input file
         * args[1]: path to output directory (the folder should not exist)
         * args[2]: bin size, a group of prices of this bin size will 
         *          form an intermediate median. An integer larger than 0.
         * args[3]: sample rate(x), specifies every x rows there will be 
         *          one row treated as input. An integer larger than 0.
         * Date created: Feb 10, 2015
         * @author Yaxin Huang, Revon Matthews
         *****************************************************************/
        // Arguments length check
        if (args.length != 4) {
            System.out.println("Usage: hadoop jar <name-of-jar.jar> "
                    + "MedianOfPurchases <path-to-input-file> "
                    + "<path-to-output-directory> "
                    + "<bin-size> <sample-rate>");
            System.exit(1);
        }
        // Check if the bin size & sample rate is valid input:
        try {
            binSize = Integer.parseInt(args[2]);
            sampleRate = Integer.parseInt(args[3]); // Input Sampling rate 
            if (binSize < 1 || sampleRate < 1) {
                System.out.println("* Both bin-size and sample-rate "
                        + "should be an integer larger"
                        + " than 0.");
                System.exit(1);
            }
        }
        catch (NumberFormatException ne) {
            System.out.println("Usage: hadoop jar <name-of-jar.jar> "
                    + "MedianOfPurchases <path-to-input-file> "
                    + "<path-to-output-directory> "
                    + "<bin-size> <sample-rate>\n"
                    + "* Both bin-size and sample-rate "
                    + "should be an integer larger than 0.");
            System.exit(1);
        }
        
        samplingTime = System.currentTimeMillis();
        /****Generate a sampled input file.***/        
        inputPath = args[0] + "_temp.txt"; // path of sampled input file
        // Original input file
        Scanner sc = new Scanner(new File(args[0]));
        // Input file to which we copy the sampled data
        FileWriter fw = new FileWriter(new File(inputPath));
        
        // Copying data from the original input file to the sampled data 
        // input file according to the sampling rate 
        int i = 1;
        while (sc.hasNextLine()) {
            if(i % sampleRate == 0) fw.write(sc.nextLine() + "\n");
            else sc.nextLine();
            ++i;
        }
        sc.close();
        fw.close();
        samplingTime = System.currentTimeMillis() - samplingTime;
        
        // Run the job
        int res = ToolRunner.run(new Configuration(), 
                new MedianOfPurchases(), args);
        System.exit(res);
    }
    
    public int run(String[] args) throws Exception {
        /*****************************************************************
         * When the jar is run, the user should include these arguments:
         * args[0]: path to input file
         * args[1]: path to output directory (the folder should not exist)
         * args[2]: bin size, a group of prices of this bin size will 
         *          form an intermediate median. An integer larger than 0.
         * args[3]: sample rate(x), specifies every x rows there will be 
         *          one row treated as input. An integer larger than 0.
         * Date created: Feb 10, 2015
         * @author Yaxin Huang
         *****************************************************************/
        
        // When implementing tool
        Configuration conf = this.getConf();
 
        // Create job
        @SuppressWarnings("deprecation")
        Job job = new Job(conf, "Median Of Purchases");
        job.setJarByClass(MedianOfPurchases.class);
 
        // Setup MapReduce job
        // Do not specify the number of Reducer
        job.setMapperClass(MedianOfPurchasesMapper.class);
        job.setReducerClass(MedianOfPurchasesReducer.class);
        job.setCombinerClass(MedianOfPurchasesCombiner.class);
 
        // Specify key / value        
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(DoubleWritable.class);
 
        // Input: the inputPath can be the sampled input file's path
        FileInputFormat.addInputPath(job, new Path(inputPath));
        job.setInputFormatClass(TextInputFormat.class);
 
        // Output
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        job.setOutputFormatClass(TextOutputFormat.class);

        jobRunningTime = System.currentTimeMillis();
        if (job.waitForCompletion(true)) {
            // Exit normally
            jobRunningTime = System.currentTimeMillis() - jobRunningTime;
            System.out.println("#------------End-----------#\n"
                    + "Sampling input file time = " + samplingTime + " ms\n"
                    + "Job running time = " + jobRunningTime + " ms\n");
            // File sampledInput = new File(inputPath);
            // sampledInput.delete();
            return 0;
        }
        else {
            return 1;
        }
    }
}
